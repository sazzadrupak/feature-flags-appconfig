AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Feature Flags AppConfig Setup

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  LayerArn:
    Type: String
    Description: ARN of the Lambda Layer containing dependencies
    Default: ""

Conditions:
  UseLayer: !Not [!Equals [!Ref LayerArn, ""]]

Resources:
  # AppConfig Application
  FeatureFlagsApplication:
    Type: AWS::AppConfig::Application
    Properties:
      Name: !Sub "feature-flags-${Environment}"
      Description: Feature flags for country-specific configurations

  # AppConfig Environment
  FeatureFlagsEnvironment:
    Type: AWS::AppConfig::Environment
    Properties:
      ApplicationId: !Ref FeatureFlagsApplication
      Name: !Ref Environment
      Description: !Sub "Environment for ${Environment}"

  # AppConfig Configuration Profile
  FeatureFlagsConfigProfile:
    Type: AWS::AppConfig::ConfigurationProfile
    Properties:
      ApplicationId: !Ref FeatureFlagsApplication
      Name: country-feature-flags
      LocationUri: hosted
      Type: AWS.AppConfig.FeatureFlags

  # Initial configuration version with valid feature flags schema
  InitialConfigVersion:
    Type: AWS::AppConfig::HostedConfigurationVersion
    Properties:
      ApplicationId: !Ref FeatureFlagsApplication
      ConfigurationProfileId: !Ref FeatureFlagsConfigProfile
      ContentType: application/json
      Content: |
        {
          "flags": {},
          "values": {},
          "version": "1"
        }

  # Deployment Strategy
  ImmediateDeploymentStrategy:
    Type: AWS::AppConfig::DeploymentStrategy
    Properties:
      Name: !Sub "immediate-${Environment}"
      Description: Immediate deployment for feature flags
      DeploymentDurationInMinutes: 0
      FinalBakeTimeInMinutes: 0
      GrowthFactor: 100
      GrowthType: LINEAR
      ReplicateTo: NONE

  # Initial Deployment
  InitialDeployment:
    Type: AWS::AppConfig::Deployment
    Properties:
      ApplicationId: !Ref FeatureFlagsApplication
      ConfigurationProfileId: !Ref FeatureFlagsConfigProfile
      ConfigurationVersion: !Ref InitialConfigVersion
      DeploymentStrategyId: !Ref ImmediateDeploymentStrategy
      EnvironmentId: !Ref FeatureFlagsEnvironment

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AppConfigAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - appconfig:GetConfiguration
                  - appconfig:CreateHostedConfigurationVersion
                  - appconfig:StartDeployment
                Resource: '*'

  # Get Feature Flags Lambda
  GetFeatureFlagsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/getFeatureFlags.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers: !If
        - UseLayer
        - [!Ref LayerArn]
        - !Ref 'AWS::NoValue'
      Environment:
        Variables:
          APPLICATION_ID: !Ref FeatureFlagsApplication
          ENVIRONMENT_ID: !Ref FeatureFlagsEnvironment
          CONFIGURATION_PROFILE_ID: !Ref FeatureFlagsConfigProfile
          NODE_OPTIONS: '--enable-source-maps'
          LOG_LEVEL: DEBUG
      Events:
        GetFeatureFlags:
          Type: Api
          Properties:
            RestApiId: !Ref FeatureFlagsApi
            Path: /feature-flags/{country}
            Method: get

  # Update Feature Flags Lambda
  UpdateFeatureFlagsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/updateFeatureFlags.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers: !If
        - UseLayer
        - [!Ref LayerArn]
        - !Ref 'AWS::NoValue'
      Environment:
        Variables:
          APPLICATION_ID: !Ref FeatureFlagsApplication
          ENVIRONMENT_ID: !Ref FeatureFlagsEnvironment
          CONFIGURATION_PROFILE_ID: !Ref FeatureFlagsConfigProfile
          DEPLOYMENT_STRATEGY_ID: !Ref ImmediateDeploymentStrategy
          NODE_OPTIONS: '--enable-source-maps'
          LOG_LEVEL: DEBUG
      Events:
        UpdateFeatureFlags:
          Type: Api
          Properties:
            RestApiId: !Ref FeatureFlagsApi
            Path: /feature-flags/{country}
            Method: post

  # Debug Lambda (temporary for troubleshooting)
  DebugFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/debug.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Layers: !If
        - UseLayer
        - [!Ref LayerArn]
        - !Ref 'AWS::NoValue'
      Events:
        Debug:
          Type: Api
          Properties:
            RestApiId: !Ref FeatureFlagsApi
            Path: /debug
            Method: get

  # API Gateway
  FeatureFlagsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

Outputs:
  ApplicationId:
    Description: AppConfig Application ID
    Value: !Ref FeatureFlagsApplication
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationId"
  
  EnvironmentId:
    Description: AppConfig Environment ID
    Value: !Ref FeatureFlagsEnvironment
    Export:
      Name: !Sub "${AWS::StackName}-EnvironmentId"
  
  ConfigurationProfileId:
    Description: AppConfig Configuration Profile ID
    Value: !Ref FeatureFlagsConfigProfile
    Export:
      Name: !Sub "${AWS::StackName}-ConfigurationProfileId"
  
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${FeatureFlagsApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"