name: Deploy Backend with Layer

on:
  workflow_dispatch:
    # inputs:
    #   environment:
    #     description: 'Environment to deploy to'
    #     required: true
    #     default: 'dev'
    #     type: choice
    #     options:
    #       - dev
    #       - staging
    #       - prod
    #   layer_version:
    #     description: 'Specific layer version to use (leave empty for latest)'
    #     required: false
    #     default: ''
  push:
    branches: [main]
    paths:
      - 'backend/**'
  # pull_request:
  #   branches: [main]
  #   paths:
  #     - 'backend/**'

env:
  CentralArtifactBucket: appconfig-central-artifact-bucket
  MajorMinorVersion: multi-country-feature-flags-backend-v0.1
  ServiceName: multi-country-feature-flags-backend
  Region: us-east-1
  WorkingDirectory: backend
  ApiVersion: v1
  TemplateName: template.yaml

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    # Environment-specific configurations
    strategy:
      matrix:
        include:
          - environment: dev
            # Dev environment - hardcoded layer version
            layer_arn: arn:aws:lambda:us-east-1:115555360667:layer:feature-flags-deps-dev:11
          # - environment: staging
          #   # Staging environment - stable tested layer version
          #   layer_arn: arn:aws:lambda:us-east-1:115555360667:layer:feature-flags-deps-staging:2
          # - environment: prod
          #   # Production environment - well-tested stable layer version  
          #   layer_arn: arn:aws:lambda:us-east-1:115555360667:layer:feature-flags-deps-prod:1

    steps:
        # Only run for the requested environment (or dev by default)
      - name: Check if should run for this environment
        id: should-run
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "${{ matrix.environment }}" ]] || \
             [[ "${{ github.event.inputs.environment }}" == "" && "${{ matrix.environment }}" == "dev" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-region: us-east-1
            role-to-assume: arn:aws:iam::115555360667:role/feature-flag-repo
            role-session-name: GithubActionsSession

      - name: Create S3 bucket if it doesn't exist
        run: |
          if ! aws s3api head-bucket --bucket "${{ env.CentralArtifactBucket }}" 2>/dev/null; then
            echo "Creating S3 bucket: ${{ env.CentralArtifactBucket }}"
            aws s3api create-bucket --bucket "${{ env.CentralArtifactBucket }}" --region "${{ env.Region }}"
            aws s3api put-bucket-versioning --bucket "${{ env.CentralArtifactBucket }}" --versioning-configuration Status=Enabled
          else
            echo "S3 bucket ${{ env.CentralArtifactBucket }} already exists"
          fi

      - name: Generate version number
        run: |
          ### Version number structure like <service-name>-v0.1.1
          VERSION_NUMBER="$MajorMinorVersion.$RUN_NUMBER"
          echo "VERSION=$VERSION_NUMBER" >> $GITHUB_ENV

          if git ls-remote --exit-code --tags origin $VERSION_NUMBER ; then
            echo "Version $VERSION_NUMBER has been built already, bypassing build phase!"
            echo "version_exists=true" >> $GITHUB_ENV
          else
            echo "version_exists=false" >> $GITHUB_ENV
          fi
        env:
          RUN_NUMBER: ${{ github.run_number }}

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Install dependencies
        working-directory: ${{ env.WorkingDirectory }}
        run: npm ci

      # - name: Run tests
      #   working-directory: backend
      #   run: npm test

      - name: Run linting
        working-directory: ${{ env.WorkingDirectory }}
        run: npm run lint

      - name: Build
        working-directory: ${{ env.WorkingDirectory }}
        run: npm run build

      - name: Set Layer ARN
        run: |
          # Use hardcoded layer ARN from matrix
          LAYER_ARN="${{ matrix.layer_arn }}"
          echo "✅ Using hardcoded layer ARN: $LAYER_ARN"
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV

      - name: SAM Build
        working-directory: ${{ env.WorkingDirectory }}
        run: |
          sam build -t ${{ env.TemplateName || 'template.yaml' }}

      - name: Output the version of this build to other jobs
        id: set_version
        run: |
          echo "version_tag=$VERSION" >> $GITHUB_OUTPUT

      - name: Package artifacts and publish
        working-directory: ${{ env.WorkingDirectory }}
        run: |
          # Package and upload SAM artifacts
          sam package --s3-bucket ${{ env.CentralArtifactBucket }} --s3-prefix backend/${{ env.ServiceName }}/$VERSION --output-template-file deployment-$VERSION.yml
          # Upload the deployment template
          aws s3 cp deployment-$VERSION.yml s3://${{ env.CentralArtifactBucket }}/backend/${{ env.ServiceName }}/$VERSION/deployment-$VERSION.yml

      - name: Tag this build
        if: env.version_exists == 'false'
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "action@github.com"
          git tag -a $VERSION -m "created by Github Action"
          git push origin $VERSION

      - name: SAM Deploy
        working-directory: ${{ env.WorkingDirectory }}
        run: |
          sam deploy \
            --template-file deployment-$VERSION.yml \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --stack-name ${{ env.ServiceName }}-${{ matrix.environment }} \
            --parameter-overrides \
              Environment=${{ matrix.environment }} \
              LayerArn="${{ env.LAYER_ARN }}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.Region }}

    #   - name: Get API URL
    #     working-directory: backend
    #     run: |
    #       API_URL=$(aws cloudformation describe-stacks \
    #         --stack-name feature-flags-backend-${{ matrix.environment }} \
    #         --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
    #         --output text \
    #         --region ${{ env.AWS_REGION }})
          
    #       echo "🌐 API Gateway URL: $API_URL"
    #       echo "API_URL=$API_URL" >> $GITHUB_ENV

    #   - name: Test API
    #     run: |
    #       echo "🧪 Testing API endpoint..."
    #       # Add basic API tests here if needed
    #       curl -f "${{ env.API_URL }}/feature-flags/US" || echo "API test failed - this might be expected for new deployments"