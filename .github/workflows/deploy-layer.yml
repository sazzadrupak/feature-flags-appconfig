name: Deploy Lambda Layer

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      version_tag:
        description: 'Version tag for the layer (e.g., v1.2.3)'
        required: false
        default: ''
  push:
    branches: [main]
    paths:
      - 'lambda-layer/**'
  # pull_request:
  #   branches: [main]
  #   paths:
  #     - 'lambda-layer/**'

env:
  CentralArtifactBucket: appconfig-central-artifact-bucket
  MajorMinorVersion: multi-country-feature-flags-layer-v0.1
  ServiceName: multi-country-feature-flags-lambda-layer
  Region: us-east-1
  WorkingDirectory: lambda-layer
  ApiVersion: v1
  TemplateName: template.yaml

jobs:
  deploy-layer:
    runs-on: ubuntu-latest
    outputs:
      layer-arn-dev: ${{ steps.get-layer-info.outputs.layer-arn-dev }}
      layer-version-dev: ${{ steps.get-layer-info.outputs.layer-version-dev }}
      layer-arn-staging: ${{ steps.get-layer-info.outputs.layer-arn-staging }}
      layer-version-staging: ${{ steps.get-layer-info.outputs.layer-version-staging }}
      layer-arn-prod: ${{ steps.get-layer-info.outputs.layer-arn-prod }}
      layer-version-prod: ${{ steps.get-layer-info.outputs.layer-version-prod }}

    # this is required for authenticating to AWS via the OIDC Provider we set up
    permissions:
      id-token: write
      contents: write

    strategy:
      matrix:
        environment: [dev]  # Add staging, prod as needed
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: lambda-layer/package-lock.json

      - name: Generate version number
        run: |
          ### Version number structure like <service-name>-v0.1.1
          VERSION_NUMBER="$MajorMinorVersion.$RUN_NUMBER"
          echo "VERSION=$VERSION_NUMBER" >> $GITHUB_ENV

          if git ls-remote --exit-code --tags origin $VERSION_NUMBER ; then
            echo "Version $VERSION_NUMBER has been built already, bybassing build phase!"
            echo "version_exists=true" >> $GITHUB_ENV
          else
            echo "version_exists=false" >> $GITHUB_ENV
          fi
        env:
          RUN_NUMBER: ${{ github.run_number }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-region: ${{ env.Region }}
            role-to-assume: arn:aws:iam::115555360667:role/feature-flag-repo
            role-session-name: GithubActionsSession

      - name: Create S3 bucket if it doesn't exist
        run: |
          if ! aws s3api head-bucket --bucket "${{ env.CentralArtifactBucket }}" 2>/dev/null; then
            echo "Creating S3 bucket: ${{ env.CentralArtifactBucket }}"
            aws s3api create-bucket --bucket "${{ env.CentralArtifactBucket }}" --region "${{ env.Region }}"
            aws s3api put-bucket-versioning --bucket "${{ env.CentralArtifactBucket }}" --versioning-configuration Status=Enabled
          else
            echo "S3 bucket ${{ env.CentralArtifactBucket }} already exists"
          fi

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      # - name: Clean up failed stack if exists
      #   run: |
      #     STACK_NAME="${{ env.ServiceName }}-${{ matrix.environment }}"
      #     STACK_STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "STACK_NOT_EXISTS")
          
      #     if [[ "$STACK_STATUS" == "ROLLBACK_IN_PROGRESS" || "$STACK_STATUS" == "ROLLBACK_COMPLETE" || "$STACK_STATUS" == "CREATE_FAILED" ]]; then
      #       echo "Stack $STACK_NAME is in state: $STACK_STATUS. Deleting failed stack..."
      #       aws cloudformation delete-stack --stack-name "$STACK_NAME" --region ${{ env.Region }}
      #       echo "Waiting for stack deletion to complete..."
      #       aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" --region ${{ env.Region }}
      #       echo "Stack deleted successfully"
      #     elif [[ "$STACK_STATUS" == "STACK_NOT_EXISTS" ]]; then
      #       echo "Stack $STACK_NAME does not exist. Proceeding with deployment..."
      #     else
      #       echo "Stack $STACK_NAME is in state: $STACK_STATUS. Proceeding with deployment..."
      #     fi

      - name: Build Lambda Layer
        working-directory: ${{ env.WorkingDirectory }}
        run: |
          echo "Building Lambda Layer for ${{ matrix.environment }}"
          ./build.sh

      - name: SAM Build
        working-directory: ${{ env.WorkingDirectory }}
        run: |
          sam build -t ${{ env.TemplateName }}
      
      - name: Output the version of this build to other jobs
        id: set_version
        run: |
          echo "version_tag=$VERSION" >> $GITHUB_OUTPUT

      - name: Package artifacts and publish
        working-directory: ${{ env.WorkingDirectory }}
        run: |
          # Package and upload SAM artifacts
          sam package --s3-bucket ${{ env.CentralArtifactBucket }} --s3-prefix lambda-layer/${{ env.ServiceName }}/$VERSION --output-template-file deployment-$VERSION.yml
          # Upload the deployment template  
          aws s3 cp deployment-$VERSION.yml s3://${{ env.CentralArtifactBucket }}/lambda-layer/${{ env.ServiceName }}/$VERSION/deployment-$VERSION.yml
      
      - name: Tag this build
        if: env.version_exists == 'false'
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "action@github.com"
          git tag -a $VERSION -m "created by Github Action"
          git push origin $VERSION

      - name: SAM Deploy
        working-directory: ${{ env.WorkingDirectory }}
        run: |
          sam deploy \
            --template-file deployment-$VERSION.yml \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --stack-name ${{ env.ServiceName }}-${{ matrix.environment }} \
            --parameter-overrides Environment=${{ matrix.environment }} \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.Region }}

      - name: Get Layer ARN and Version
        id: get-layer-info
        working-directory: ${{ env.WorkingDirectory }}
        run: |
          LAYER_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.ServiceName }}-${{ matrix.environment }} \
            --query 'Stacks[0].Outputs[?OutputKey==`LayerArn`].OutputValue' \
            --output text \
            --region ${{ env.Region }})
          
          LAYER_VERSION=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.ServiceName }}-${{ matrix.environment }} \
            --query 'Stacks[0].Outputs[?OutputKey==`LayerVersion`].OutputValue' \
            --output text \
            --region ${{ env.Region }})
          
          echo "Layer ARN: $LAYER_ARN"
          echo "Layer Version: $LAYER_VERSION"
          
          # Set outputs for this job
          echo "layer-arn-${{ matrix.environment }}=$LAYER_ARN" >> $GITHUB_OUTPUT
          echo "layer-version-${{ matrix.environment }}=$LAYER_VERSION" >> $GITHUB_OUTPUT
          
          # Save to environment files with version info
          mkdir -p ../backend/layer-info
          cat > ../backend/layer-info/${{ matrix.environment }}.json << EOF
          {
            "layerArn": "$LAYER_ARN",
            "layerVersion": "$LAYER_VERSION",
            "deploymentVersion": "$VERSION",
            "deployedAt": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "gitSha": "${{ github.sha }}"
          }
          EOF

      - name: Upload Layer Info artifact
        uses: actions/upload-artifact@v4
        with:
          name: layer-info-${{ matrix.environment }}-${{ steps.set_version.outputs.version_tag }}
          path: backend/layer-info/
          retention-days: 90

      - name: Create Release (if tagged)
        if: github.event.inputs.version_tag != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: layer-${{ github.event.inputs.version_tag }}
          release_name: Lambda Layer ${{ github.event.inputs.version_tag }}
          body: |
            Lambda Layer Release ${{ github.event.inputs.version_tag }}
            
            **Layer Information:**
            - Environment: ${{ matrix.environment }}
            - Layer ARN: ${{ steps.get-layer-info.outputs[format('layer-arn-{0}', matrix.environment)] }}
            - Layer Version: ${{ steps.get-layer-info.outputs[format('layer-version-{0}', matrix.environment)] }}
            - Git SHA: ${{ github.sha }}
          draft: false
          prerelease: false