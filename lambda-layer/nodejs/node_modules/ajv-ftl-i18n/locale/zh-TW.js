const __locales = ["zh-TW"]

const __formatNumber = (value, options) => {
	return new Intl.NumberFormat(__locales, options).format(value)
}

const __formatVariable = (value) => {
  if (typeof value === 'string') return value
  const decimal =  Number.parseFloat(value)
  const number = Number.isInteger(decimal) ? Number.parseInt(value) : decimal
  return __formatNumber(number)
}

const __select = (value, cases, fallback, options) => {
	const pluralRules = new Intl.PluralRules(__locales, options)
	const rule = pluralRules.select(value)
	return cases[value] ?? cases[rule] ?? fallback
}

const defaultMessage = (params) => `應該通過 "${params?.keyword}" 關鍵詞檢驗`
const comparisonLimitFormat = (params) => `應該是 ${params?.comparison} ${params?.limit}`
const comparisonLimit = (params) => `應該要 ${params?.comparison} ${params?.limit}`
export const items = (params) => `不可以超過${__formatVariable(params?.limit)}個元素`
export const additionalItems = (params) => `${items(params)}`
export const additionalProperties = `不可以有額外的屬性`
export const anyOf = `不符合 "anyOf" 指定的模式`
export const _const = `應該等於常數`
export const contains = `應該包含一個有效元素`
export const dependencies = (params) => `應該要有屬性${__formatVariable(params?.property)}的依賴屬性${__formatVariable(params?.deps)}`
export const dependentRequired = (params) => `${dependencies(params)}`
export const _enum = `應該要在預設的值之中`
export const falseSchema = `布林模式不正確`
export const format = (params) => `應該要符合 "${__formatVariable(params?.format)}" 格式`
export const formatMaximum = (params) => `${comparisonLimitFormat(params)}`
export const formatExclusiveMaximum = (params) => `${comparisonLimitFormat(params)}`
export const formatMinimum = (params) => `${comparisonLimitFormat(params)}`
export const formatExclusiveMinimum = (params) => `${comparisonLimitFormat(params)}`
export const _if = (params) => `應該符合 "${__formatVariable(params?.failingKeyword)}" schema`
export const maximum = (params) => `${comparisonLimit(params)}`
export const exclusiveMaximum = (params) => `${maximum(params)}`
export const maxItems = (params) => `不應該多於 ${__formatVariable(params?.limit)} 個`
export const maxLength = (params) => `不應該多於 ${__formatVariable(params?.limit)} 個字元`
export const maxProperties = (params) => `不應該多於 ${__formatVariable(params?.limit)} 個屬性`
export const minimum = (params) => `${comparisonLimit(params)}`
export const exclusiveMinimum = (params) => `${minimum(params)}`
export const minItems = (params) => `不應該少於 ${__formatVariable(params?.limit)} 個`
export const minLength = (params) => `不應該少於 ${__formatVariable(params?.limit)} 個字元`
export const minProperties = (params) => `不應該少於 ${__formatVariable(params?.limit)} 個屬性`
export const multipleOf = (params) => `應該是 ${__formatVariable(params?.multipleOf)} 的整數倍`
export const not = `不應該符合 "not" schema`
export const oneOf = `只能符合一個 "oneOf" 中的 schema`
export const pattern = (params) => `應該符合模式 "${__formatVariable(params?.pattern)}"`
export const patternRequired = (params) => `應該有屬性對應模式 "${__formatVariable(params?.missingPattern)}"`
export const propertyNames = `属性名 無效`
export const required = (params) => `應該有必須屬性 ${__formatVariable(params?.missingProperty)}`
export const type = (params) => `應該是 ${__formatVariable(params?.type)}${__select(
    params?.nullable,
    {
      'true': `/null`
    },
    `${""}`
  )} 類型`
export const unevaluatedItems = (params) => `的元素不可以超過 ${__formatVariable(params?.len)} 個`
export const unevaluatedProperties = `不應該有未驗證的屬性`
export const uniqueItems = (params) => `不應該有重複項目 (第 ${__formatVariable(params?.j)} 項和第 ${__formatVariable(params?.i)} 項是重複的)`
export const discriminator = (params) => `${__select(
    params?.error,
    {
      'tag': `標籤 "${__formatVariable(params?.tag)}" 的類型必須是字串`,
      'mapping': `標籤 "${__formatVariable(params?.tag)}" 必須在 mapping 其中之一`
    },
    `${type(params)}`
  )}`
export const properties = (params) => `${__select(
    params?.error,
    {
      'additional': `不可以有額外的屬性`,
      'missing': `應該有必須屬性 ${__formatVariable(params?.missingProperty)}`
    },
    `${type(params)}`
  )}`
export const elements = (params) => `${type(params)}`
export const values = (params) => `${type(params)}`
export const union = `不符合 union 指定的模式`
const __exports = {
  items,
  additionalItems,
  additionalProperties,
  anyOf,
  'const': _const,
  contains,
  dependencies,
  dependentRequired,
  'enum': _enum,
  falseSchema,
  format,
  formatMaximum,
  formatExclusiveMaximum,
  formatMinimum,
  formatExclusiveMinimum,
  'if': _if,
  maximum,
  exclusiveMaximum,
  maxItems,
  maxLength,
  maxProperties,
  minimum,
  exclusiveMinimum,
  minItems,
  minLength,
  minProperties,
  multipleOf,
  not,
  oneOf,
  pattern,
  patternRequired,
  propertyNames,
  required,
  type,
  unevaluatedItems,
  unevaluatedProperties,
  uniqueItems,
  discriminator,
  properties,
  elements,
  values,
  union
}
export default (errors) => {
  if (!errors?.length) return
  for (const e of errors) {
    let { keyword } = e
    if (keyword === 'false schema') keyword = 'falseSchema'
    let source = __exports[keyword] ?? __exports['_'+keyword]
    let values = {}
    if (keyword === 'errorMessage') {
      const [message, ...valuesPairs] = e.message.split(', ')
      ;(valuesPairs.join(', ').match(regExpJsonPointerPairs) ?? []).forEach(pair => {
        const [key, value] = pair.split(':')
        values[key] = value.replace(regExpJsonPointerQuote, '')
      })
      source ??= __exports[message] ?? __exports['_'+message] ?? e.message
    } else {
      source ??= __exports.defaultMessage
    }
    if (typeof source === 'function') {
      e.message = source({keyword:e.keyword, ...e.params, ...values})
    } else {
      e.message = source
    }
  }
}
const regExpJsonPointerPairs = /([a-zA-Z0-9_-]+):(".*"|[^,"]+)/g
const regExpJsonPointerQuote = /(^"|"$)/g
