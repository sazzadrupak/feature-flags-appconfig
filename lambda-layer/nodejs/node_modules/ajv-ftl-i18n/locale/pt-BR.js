const __locales = ["pt-BR"]

const __formatNumber = (value, options) => {
	return new Intl.NumberFormat(__locales, options).format(value)
}

const __formatVariable = (value) => {
  if (typeof value === 'string') return value
  const decimal =  Number.parseFloat(value)
  const number = Number.isInteger(decimal) ? Number.parseInt(value) : decimal
  return __formatNumber(number)
}

const __select = (value, cases, fallback, options) => {
	const pluralRules = new Intl.PluralRules(__locales, options)
	const rule = pluralRules.select(value)
	return cases[value] ?? cases[rule] ?? fallback
}

const defaultMessage = (params) => `deve passar a validação da keyword "${params?.keyword}"`
const comparisonLimit = (params) => `deve ser ${params?.comparison} ${params?.limit}`
export const items = (params) => `não são permitidos itens adicionais (mais do que ${__formatVariable(params?.limit)})`
export const additionalItems = (params) => `${items(params)}`
export const additionalProperties = `não são permitidas propriedades adicionais`
export const anyOf = `os dados não correspondem a nenhum schema de "anyOf"`
export const _const = `deve ser igual à constante`
export const contains = `deve conter um item válido`
export const dependencies = (params) => `deve ter ${__select(
    params?.depsCount,
    {
      'one': `propriedade`
    },
    `propriedades`
  )} ${__formatVariable(params?.deps)} quando a propriedade ${__formatVariable(params?.property)} estiver presente`
export const dependentRequired = (params) => `${dependencies(params)}`
export const _enum = `deve ser igual a um dos valores permitidos`
export const falseSchema = `o schema booleano é "false"`
export const format = (params) => `deve corresponder ao formato "${__formatVariable(params?.format)}"`
export const formatMaximum = (params) => `${comparisonLimit(params)}`
export const formatExclusiveMaximum = (params) => `${comparisonLimit(params)}`
export const formatMinimum = (params) => `${comparisonLimit(params)}`
export const formatExclusiveMinimum = (params) => `${comparisonLimit(params)}`
export const _if = (params) => `deve corresponder ao schema "${__formatVariable(params?.failingKeyword)}"`
export const maximum = (params) => `${comparisonLimit(params)}`
export const exclusiveMaximum = (params) => `${maximum(params)}`
export const maxItems = (params) => `não deve ter mais que ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `elemento`
    },
    `elementos`
  )}`
export const maxLength = (params) => `não deve ser maior que ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `caracter`
    },
    `caracteres`
  )}`
export const maxProperties = (params) => `não deve ter mais que ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `propriedade`
    },
    `propriedades`
  )}`
export const minimum = (params) => `${comparisonLimit(params)}`
export const exclusiveMinimum = (params) => `${minimum(params)}`
export const minItems = (params) => `não deve ter menos que ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `elemento`
    },
    `elementos`
  )}`
export const minLength = (params) => `não deve ser mais curta que ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `caracter`
    },
    `caracteres`
  )}`
export const minProperties = (params) => `não deve ter menos que ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `propriedade`
    },
    `propriedades`
  )}`
export const multipleOf = (params) => `deve ser múltiplo de ${__formatVariable(params?.multipleOf)}`
export const not = `não deve ser valido segundo o schema em "not"`
export const oneOf = `deve corresponder exatamente com um schema em "oneOf"`
export const pattern = (params) => `deve corresponder ao padrão "${__formatVariable(params?.pattern)}"`
export const patternRequired = (params) => `deve ter a propriedade correspondente ao padrão "${__formatVariable(params?.missingPattern)}"`
export const propertyNames = `o nome da propriedade é inválido`
export const required = (params) => `deve ter a propriedade obrigatória ${__formatVariable(params?.missingProperty)}`
export const type = (params) => `deve ser ${__select(
    params?.type,
    {
      'number': `um número`,
      'integer': `um número inteiro`,
      'string': `um texto`,
      'boolean': `um booleano`
    },
    `${__formatVariable(params?.type)}`
  )}${__select(
    params?.nullable,
    {
      'true': `/null`
    },
    `${""}`
  )}`
export const unevaluatedItems = (params) => `não pode possuir mais que${__formatVariable(params?.len)} ${__select(
    params?.len,
    {
      'one': `item`
    },
    `itens`
  )}`
export const unevaluatedProperties = `não pode possuir propridades não avaliadas`
export const uniqueItems = (params) => `não deve ter itens duplicados (os itens ## ${__formatVariable(params?.j)} e ${__formatVariable(params?.i)} são idênticos)`
export const discriminator = (params) => `${__select(
    params?.error,
    {
      'tag': `a tag "${__formatVariable(params?.tag)}" deve ser uma string`,
      'mapping': `o valor da tag "${__formatVariable(params?.tag)}" deve estar no mapping`
    },
    `${type(params)}`
  )}`
export const properties = (params) => `${__select(
    params?.error,
    {
      'additional': `não deve ter propriedades adicionais`,
      'missing': `deve ter a propriedade obrigatória ${__formatVariable(params?.missingProperty)}`
    },
    `${type(params)}`
  )}`
export const elements = (params) => `${type(params)}`
export const values = (params) => `${type(params)}`
export const union = `os dados não correspondem a nenhum schema de "union"`
const __exports = {
  items,
  additionalItems,
  additionalProperties,
  anyOf,
  'const': _const,
  contains,
  dependencies,
  dependentRequired,
  'enum': _enum,
  falseSchema,
  format,
  formatMaximum,
  formatExclusiveMaximum,
  formatMinimum,
  formatExclusiveMinimum,
  'if': _if,
  maximum,
  exclusiveMaximum,
  maxItems,
  maxLength,
  maxProperties,
  minimum,
  exclusiveMinimum,
  minItems,
  minLength,
  minProperties,
  multipleOf,
  not,
  oneOf,
  pattern,
  patternRequired,
  propertyNames,
  required,
  type,
  unevaluatedItems,
  unevaluatedProperties,
  uniqueItems,
  discriminator,
  properties,
  elements,
  values,
  union
}
export default (errors) => {
  if (!errors?.length) return
  for (const e of errors) {
    let { keyword } = e
    if (keyword === 'false schema') keyword = 'falseSchema'
    let source = __exports[keyword] ?? __exports['_'+keyword]
    let values = {}
    if (keyword === 'errorMessage') {
      const [message, ...valuesPairs] = e.message.split(', ')
      ;(valuesPairs.join(', ').match(regExpJsonPointerPairs) ?? []).forEach(pair => {
        const [key, value] = pair.split(':')
        values[key] = value.replace(regExpJsonPointerQuote, '')
      })
      source ??= __exports[message] ?? __exports['_'+message] ?? e.message
    } else {
      source ??= __exports.defaultMessage
    }
    if (typeof source === 'function') {
      e.message = source({keyword:e.keyword, ...e.params, ...values})
    } else {
      e.message = source
    }
  }
}
const regExpJsonPointerPairs = /([a-zA-Z0-9_-]+):(".*"|[^,"]+)/g
const regExpJsonPointerQuote = /(^"|"$)/g
