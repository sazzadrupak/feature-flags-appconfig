const __locales = ["pl"]

const __formatNumber = (value, options) => {
	return new Intl.NumberFormat(__locales, options).format(value)
}

const __formatVariable = (value) => {
  if (typeof value === 'string') return value
  const decimal =  Number.parseFloat(value)
  const number = Number.isInteger(decimal) ? Number.parseInt(value) : decimal
  return __formatNumber(number)
}

const __select = (value, cases, fallback, options) => {
	const pluralRules = new Intl.PluralRules(__locales, options)
	const rule = pluralRules.select(value)
	return cases[value] ?? cases[rule] ?? fallback
}

const defaultMessage = (params) => `powinien przejść walidację "${params?.keyword}"`
const comparisonLimit = (params) => `powinien być ${params?.comparison} ${params?.limit}`
export const items = (params) => `nie powinien mieć więcej niż ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `elementu`
    },
    `elementów`
  )}`
export const additionalItems = (params) => `${items(params)}`
export const additionalProperties = `nie powinien zawierać dodatkowych pól`
export const anyOf = `powinien pasować do wzoru z sekcji "anyOf"`
export const _const = `powinien być równy stałej`
export const contains = `musi zawierać prawidłowy przedmiot`
export const dependencies = (params) => `powinien zawierać ${__select(
    params?.depsCount,
    {
      'one': `pole`
    },
    `pola`
  )} ${__formatVariable(params?.deps)} kiedy pole ${__formatVariable(params?.property)} jest obecne`
export const dependentRequired = (params) => `${dependencies(params)}`
export const _enum = `powinien być równy jednej z predefiniowanych wartości`
export const falseSchema = `schemat logiczny jest fałszywy`
export const format = (params) => `powinien zgadzać się z formatem "${__formatVariable(params?.format)}"`
export const formatMaximum = (params) => `${comparisonLimit(params)}`
export const formatExclusiveMaximum = (params) => `${comparisonLimit(params)}`
export const formatMinimum = (params) => `${comparisonLimit(params)}`
export const formatExclusiveMinimum = (params) => `${comparisonLimit(params)}`
export const _if = (params) => `musi być zgodny ze schematem "${__formatVariable(params?.failingKeyword)}"`
export const maximum = (params) => `${comparisonLimit(params)}`
export const exclusiveMaximum = (params) => `${maximum(params)}`
export const maxItems = (params) => `nie powinien mieć więcej niż ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `elementu`
    },
    `elementw`
  )}`
export const maxLength = (params) => `nie powinien być dłuższy niż ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `znak`
    },
    `znaków`
  )}`
export const maxProperties = (params) => `nie powinien zawierać więcej niż ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `pole`
    },
    `pól`
  )}`
export const minimum = (params) => `${comparisonLimit(params)}`
export const exclusiveMinimum = (params) => `${minimum(params)}`
export const minItems = (params) => `nie powinien mieć mniej niż ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `elementu`
    },
    `elementów`
  )}`
export const minLength = (params) => `nie powinien być krótszy niż ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `znak`
    },
    `znaków`
  )}`
export const minProperties = (params) => `nie powinien zawierać mniej niż ${__formatVariable(params?.limit)} ${__select(
    params?.limit,
    {
      'one': `pole`
    },
    `pól`
  )}`
export const multipleOf = (params) => `powinien być wielokrotnością ${__formatVariable(params?.multipleOf)}`
export const not = `nie powinien pasować do wzoru z sekcji "not"`
export const oneOf = `powinien pasować do jednego wzoru z sekcji "oneOf"`
export const pattern = (params) => `powinien zgadzać się ze wzorem "${__formatVariable(params?.pattern)}"`
export const patternRequired = (params) => `powinien mieć pole pasujące do wzorca "${__formatVariable(params?.missingPattern)}"`
export const propertyNames = `nazwa właściwości jest nieprawidłowa`
export const required = (params) => `powinien zawierać wymagane pole ${__formatVariable(params?.missingProperty)}`
export const type = (params) => `powinien być ${__formatVariable(params?.type)}${__select(
    params?.nullable,
    {
      'true': `/null`
    },
    `${""}`
  )}`
export const unevaluatedItems = (params) => `nie powinien mieć więcej niż ${__formatVariable(params?.len)} ${__select(
    params?.len,
    {
      'one': `elementu`
    },
    `elementw`
  )}`
export const unevaluatedProperties = `nie może mieć nieocenionych właściwości`
export const uniqueItems = (params) => `nie powinien zawierać elementów które się powtarzają (elementy ${__formatVariable(params?.j)} i ${__formatVariable(params?.i)} są identyczne)`
export const discriminator = (params) => `${__select(
    params?.error,
    {
      'tag': `tag "${__formatVariable(params?.tag)}" musi być ciągiem znaków`,
      'mapping': `wartość tagu "${__formatVariable(params?.tag)}" musi być w mapowaniu`
    },
    `${type(params)}`
  )}`
export const properties = (params) => `${__select(
    params?.error,
    {
      'additional': `nie powinien zawierać dodatkowych pól`,
      'missing': `powinien zawierać wymagane pole ${__formatVariable(params?.missingProperty)}`
    },
    `${type(params)}`
  )}`
export const elements = (params) => `${type(params)}`
export const values = (params) => `${type(params)}`
export const union = `powinien pasować do wzoru z sekcji "union"`
const __exports = {
  items,
  additionalItems,
  additionalProperties,
  anyOf,
  'const': _const,
  contains,
  dependencies,
  dependentRequired,
  'enum': _enum,
  falseSchema,
  format,
  formatMaximum,
  formatExclusiveMaximum,
  formatMinimum,
  formatExclusiveMinimum,
  'if': _if,
  maximum,
  exclusiveMaximum,
  maxItems,
  maxLength,
  maxProperties,
  minimum,
  exclusiveMinimum,
  minItems,
  minLength,
  minProperties,
  multipleOf,
  not,
  oneOf,
  pattern,
  patternRequired,
  propertyNames,
  required,
  type,
  unevaluatedItems,
  unevaluatedProperties,
  uniqueItems,
  discriminator,
  properties,
  elements,
  values,
  union
}
export default (errors) => {
  if (!errors?.length) return
  for (const e of errors) {
    let { keyword } = e
    if (keyword === 'false schema') keyword = 'falseSchema'
    let source = __exports[keyword] ?? __exports['_'+keyword]
    let values = {}
    if (keyword === 'errorMessage') {
      const [message, ...valuesPairs] = e.message.split(', ')
      ;(valuesPairs.join(', ').match(regExpJsonPointerPairs) ?? []).forEach(pair => {
        const [key, value] = pair.split(':')
        values[key] = value.replace(regExpJsonPointerQuote, '')
      })
      source ??= __exports[message] ?? __exports['_'+message] ?? e.message
    } else {
      source ??= __exports.defaultMessage
    }
    if (typeof source === 'function') {
      e.message = source({keyword:e.keyword, ...e.params, ...values})
    } else {
      e.message = source
    }
  }
}
const regExpJsonPointerPairs = /([a-zA-Z0-9_-]+):(".*"|[^,"]+)/g
const regExpJsonPointerQuote = /(^"|"$)/g
