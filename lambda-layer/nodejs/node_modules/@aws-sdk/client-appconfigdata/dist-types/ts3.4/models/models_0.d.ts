import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { AppConfigDataServiceException as __BaseException } from "./AppConfigDataServiceException";
export declare const InvalidParameterProblem: {
  readonly CORRUPTED: "Corrupted";
  readonly EXPIRED: "Expired";
  readonly POLL_INTERVAL_NOT_SATISFIED: "PollIntervalNotSatisfied";
};
export type InvalidParameterProblem =
  (typeof InvalidParameterProblem)[keyof typeof InvalidParameterProblem];
export interface InvalidParameterDetail {
  Problem?: InvalidParameterProblem | undefined;
}
export type BadRequestDetails =
  | BadRequestDetails.InvalidParametersMember
  | BadRequestDetails.$UnknownMember;
export declare namespace BadRequestDetails {
  interface InvalidParametersMember {
    InvalidParameters: Record<string, InvalidParameterDetail>;
    $unknown?: never;
  }
  interface $UnknownMember {
    InvalidParameters?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    InvalidParameters: (value: Record<string, InvalidParameterDetail>) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: BadRequestDetails, visitor: Visitor<T>) => T;
}
export declare const BadRequestReason: {
  readonly INVALID_PARAMETERS: "InvalidParameters";
};
export type BadRequestReason =
  (typeof BadRequestReason)[keyof typeof BadRequestReason];
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  Message?: string | undefined;
  Reason?: BadRequestReason | undefined;
  Details?: BadRequestDetails | undefined;
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare const ResourceType: {
  readonly APPLICATION: "Application";
  readonly CONFIGURATION: "Configuration";
  readonly CONFIGURATION_PROFILE: "ConfigurationProfile";
  readonly DEPLOYMENT: "Deployment";
  readonly ENVIRONMENT: "Environment";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string | undefined;
  ResourceType?: ResourceType | undefined;
  ReferencedBy?: Record<string, string> | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface StartConfigurationSessionRequest {
  ApplicationIdentifier: string | undefined;
  EnvironmentIdentifier: string | undefined;
  ConfigurationProfileIdentifier: string | undefined;
  RequiredMinimumPollIntervalInSeconds?: number | undefined;
}
export interface StartConfigurationSessionResponse {
  InitialConfigurationToken?: string | undefined;
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message?: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface GetLatestConfigurationRequest {
  ConfigurationToken: string | undefined;
}
export interface GetLatestConfigurationResponse {
  NextPollConfigurationToken?: string | undefined;
  NextPollIntervalInSeconds?: number | undefined;
  ContentType?: string | undefined;
  Configuration?: Uint8Array | undefined;
  VersionLabel?: string | undefined;
}
export declare const GetLatestConfigurationResponseFilterSensitiveLog: (
  obj: GetLatestConfigurationResponse
) => any;
