import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { Uint8ArrayBlobAdapter } from "@smithy/util-stream";
import {
  AppConfigClientResolvedConfig,
  ServiceInputTypes,
  ServiceOutputTypes,
} from "../AppConfigClient";
import {
  GetHostedConfigurationVersionRequest,
  HostedConfigurationVersion,
} from "../models/models_0";
export { __MetadataBearer };
export { $Command };
export interface GetHostedConfigurationVersionCommandInput
  extends GetHostedConfigurationVersionRequest {}
export type GetHostedConfigurationVersionCommandOutputType = Pick<
  HostedConfigurationVersion,
  Exclude<keyof HostedConfigurationVersion, "Content">
> & {
  Content?: Uint8ArrayBlobAdapter;
};
export interface GetHostedConfigurationVersionCommandOutput
  extends GetHostedConfigurationVersionCommandOutputType,
    __MetadataBearer {}
declare const GetHostedConfigurationVersionCommand_base: {
  new (
    input: GetHostedConfigurationVersionCommandInput
  ): import("@smithy/smithy-client").CommandImpl<
    GetHostedConfigurationVersionCommandInput,
    GetHostedConfigurationVersionCommandOutput,
    AppConfigClientResolvedConfig,
    ServiceInputTypes,
    ServiceOutputTypes
  >;
  new (
    input: GetHostedConfigurationVersionCommandInput
  ): import("@smithy/smithy-client").CommandImpl<
    GetHostedConfigurationVersionCommandInput,
    GetHostedConfigurationVersionCommandOutput,
    AppConfigClientResolvedConfig,
    ServiceInputTypes,
    ServiceOutputTypes
  >;
  getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
export declare class GetHostedConfigurationVersionCommand extends GetHostedConfigurationVersionCommand_base {
  protected static __types: {
    api: {
      input: GetHostedConfigurationVersionRequest;
      output: HostedConfigurationVersion;
    };
    sdk: {
      input: GetHostedConfigurationVersionCommandInput;
      output: GetHostedConfigurationVersionCommandOutput;
    };
  };
}
