import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, isSerializableHeaderValue, limitedParseFloat32 as __limitedParseFloat32, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeFloat as __serializeFloat, strictParseInt32 as __strictParseInt32, take, withBaseException, } from "@smithy/smithy-client";
import { AppConfigServiceException as __BaseException } from "../models/AppConfigServiceException";
import { BadRequestException, ConflictException, InternalServerException, PayloadTooLargeException, ResourceNotFoundException, ServiceQuotaExceededException, } from "../models/models_0";
export const se_CreateApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications");
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateConfigurationProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/configurationprofiles");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        KmsKeyIdentifier: [],
        LocationUri: [],
        Name: [],
        RetrievalRoleArn: [],
        Tags: (_) => _json(_),
        Type: [],
        Validators: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDeploymentStrategyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deploymentstrategies");
    let body;
    body = JSON.stringify(take(input, {
        DeploymentDurationInMinutes: [],
        Description: [],
        FinalBakeTimeInMinutes: [],
        GrowthFactor: (_) => __serializeFloat(_),
        GrowthType: [],
        Name: [],
        ReplicateTo: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/environments");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Monitors: (_) => _json(_),
        Name: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateExtensionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_lvn]: [() => isSerializableHeaderValue(input[_LVN]), () => input[_LVN].toString()],
    });
    b.bp("/extensions");
    let body;
    body = JSON.stringify(take(input, {
        Actions: (_) => _json(_),
        Description: [],
        Name: [],
        Parameters: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateExtensionAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/extensionassociations");
    let body;
    body = JSON.stringify(take(input, {
        ExtensionIdentifier: [],
        ExtensionVersionNumber: [],
        Parameters: (_) => _json(_),
        ResourceIdentifier: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateHostedConfigurationVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_ct]: input[_CT] || "application/octet-stream",
        [_d]: input[_D],
        [_lvn]: [() => isSerializableHeaderValue(input[_LVN]), () => input[_LVN].toString()],
        [_v]: input[_VL],
    });
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    let body;
    if (input.Content !== undefined) {
        body = input.Content;
    }
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteConfigurationProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xadpc]: input[_DPC],
    });
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDeploymentStrategyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/deployementstrategies/{DeploymentStrategyId}");
    b.p("DeploymentStrategyId", () => input.DeploymentStrategyId, "{DeploymentStrategyId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xadpc]: input[_DPC],
    });
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}");
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteExtensionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/extensions/{ExtensionIdentifier}");
    b.p("ExtensionIdentifier", () => input.ExtensionIdentifier, "{ExtensionIdentifier}", false);
    const query = map({
        [_ve]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteExtensionAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/extensionassociations/{ExtensionAssociationId}");
    b.p("ExtensionAssociationId", () => input.ExtensionAssociationId, "{ExtensionAssociationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteHostedConfigurationVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    b.p("VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetAccountSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/settings");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{Application}/environments/{Environment}/configurations/{Configuration}");
    b.p("Application", () => input.Application, "{Application}", false);
    b.p("Environment", () => input.Environment, "{Environment}", false);
    b.p("Configuration", () => input.Configuration, "{Configuration}", false);
    const query = map({
        [_ci]: [, __expectNonNull(input[_CI], `ClientId`)],
        [_ccv]: [, input[_CCV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetConfigurationProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    b.p("DeploymentNumber", () => input.DeploymentNumber.toString(), "{DeploymentNumber}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDeploymentStrategyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/deploymentstrategies/{DeploymentStrategyId}");
    b.p("DeploymentStrategyId", () => input.DeploymentStrategyId, "{DeploymentStrategyId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetExtensionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/extensions/{ExtensionIdentifier}");
    b.p("ExtensionIdentifier", () => input.ExtensionIdentifier, "{ExtensionIdentifier}", false);
    const query = map({
        [_vn]: [() => input.VersionNumber !== void 0, () => input[_VN].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetExtensionAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/extensionassociations/{ExtensionAssociationId}");
    b.p("ExtensionAssociationId", () => input.ExtensionAssociationId, "{ExtensionAssociationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetHostedConfigurationVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    b.p("VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListApplicationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications");
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListConfigurationProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDeploymentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}/deployments");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDeploymentStrategiesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/deploymentstrategies");
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEnvironmentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/environments");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListExtensionAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/extensionassociations");
    const query = map({
        [_ri]: [, input[_RI]],
        [_ei]: [, input[_EI]],
        [_evn]: [() => input.ExtensionVersionNumber !== void 0, () => input[_EVN].toString()],
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListExtensionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/extensions");
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
        [_n]: [, input[_N]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListHostedConfigurationVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
        [_vl]: [, input[_VL]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_StartDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}/deployments");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ConfigurationProfileId: [],
        ConfigurationVersion: [],
        DeploymentStrategyId: [],
        Description: [],
        DynamicExtensionParameters: (_) => _json(_),
        KmsKeyIdentifier: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_ar]: [() => isSerializableHeaderValue(input[_AR]), () => input[_AR].toString()],
    });
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    b.p("DeploymentNumber", () => input.DeploymentNumber.toString(), "{DeploymentNumber}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [__expectNonNull(input.TagKeys, `TagKeys`) != null, () => input[_TK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAccountSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/settings");
    let body;
    body = JSON.stringify(take(input, {
        DeletionProtection: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateConfigurationProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        KmsKeyIdentifier: [],
        Name: [],
        RetrievalRoleArn: [],
        Validators: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateDeploymentStrategyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deploymentstrategies/{DeploymentStrategyId}");
    b.p("DeploymentStrategyId", () => input.DeploymentStrategyId, "{DeploymentStrategyId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DeploymentDurationInMinutes: [],
        Description: [],
        FinalBakeTimeInMinutes: [],
        GrowthFactor: (_) => __serializeFloat(_),
        GrowthType: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/environments/{EnvironmentId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EnvironmentId", () => input.EnvironmentId, "{EnvironmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Monitors: (_) => _json(_),
        Name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateExtensionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/extensions/{ExtensionIdentifier}");
    b.p("ExtensionIdentifier", () => input.ExtensionIdentifier, "{ExtensionIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        Actions: (_) => _json(_),
        Description: [],
        Parameters: (_) => _json(_),
        VersionNumber: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateExtensionAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/extensionassociations/{ExtensionAssociationId}");
    b.p("ExtensionAssociationId", () => input.ExtensionAssociationId, "{ExtensionAssociationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Parameters: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_ValidateConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/validators");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("ConfigurationProfileId", () => input.ConfigurationProfileId, "{ConfigurationProfileId}", false);
    const query = map({
        [_cv]: [, __expectNonNull(input[_CV], `ConfigurationVersion`)],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const de_CreateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Description: __expectString,
        Id: __expectString,
        KmsKeyArn: __expectString,
        KmsKeyIdentifier: __expectString,
        LocationUri: __expectString,
        Name: __expectString,
        RetrievalRoleArn: __expectString,
        Type: __expectString,
        Validators: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeploymentDurationInMinutes: __expectInt32,
        Description: __expectString,
        FinalBakeTimeInMinutes: __expectInt32,
        GrowthFactor: __limitedParseFloat32,
        GrowthType: __expectString,
        Id: __expectString,
        Name: __expectString,
        ReplicateTo: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Description: __expectString,
        Id: __expectString,
        Monitors: _json,
        Name: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateExtensionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Actions: _json,
        Arn: __expectString,
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        Parameters: _json,
        VersionNumber: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateExtensionAssociationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        ExtensionArn: __expectString,
        ExtensionVersionNumber: __expectInt32,
        Id: __expectString,
        Parameters: _json,
        ResourceArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateHostedConfigurationVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_AI]: [, output.headers[_ai]],
        [_CPI]: [, output.headers[_cpi]],
        [_VN]: [() => void 0 !== output.headers[_vn_], () => __strictParseInt32(output.headers[_vn_])],
        [_D]: [, output.headers[_d]],
        [_CT]: [, output.headers[_ct]],
        [_VL]: [, output.headers[_v]],
        [_KKA]: [, output.headers[_k]],
    });
    const data = await collectBody(output.body, context);
    contents.Content = data;
    return contents;
};
export const de_DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteExtensionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteExtensionAssociationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteHostedConfigurationVersionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAccountSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeletionProtection: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_CV]: [, output.headers[_cv_]],
        [_CT]: [, output.headers[_ct]],
    });
    const data = await collectBody(output.body, context);
    contents.Content = data;
    return contents;
};
export const de_GetConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Description: __expectString,
        Id: __expectString,
        KmsKeyArn: __expectString,
        KmsKeyIdentifier: __expectString,
        LocationUri: __expectString,
        Name: __expectString,
        RetrievalRoleArn: __expectString,
        Type: __expectString,
        Validators: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        AppliedExtensions: _json,
        CompletedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        ConfigurationLocationUri: __expectString,
        ConfigurationName: __expectString,
        ConfigurationProfileId: __expectString,
        ConfigurationVersion: __expectString,
        DeploymentDurationInMinutes: __expectInt32,
        DeploymentNumber: __expectInt32,
        DeploymentStrategyId: __expectString,
        Description: __expectString,
        EnvironmentId: __expectString,
        EventLog: (_) => de_DeploymentEvents(_, context),
        FinalBakeTimeInMinutes: __expectInt32,
        GrowthFactor: __limitedParseFloat32,
        GrowthType: __expectString,
        KmsKeyArn: __expectString,
        KmsKeyIdentifier: __expectString,
        PercentageComplete: __limitedParseFloat32,
        StartedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        State: __expectString,
        VersionLabel: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeploymentDurationInMinutes: __expectInt32,
        Description: __expectString,
        FinalBakeTimeInMinutes: __expectInt32,
        GrowthFactor: __limitedParseFloat32,
        GrowthType: __expectString,
        Id: __expectString,
        Name: __expectString,
        ReplicateTo: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Description: __expectString,
        Id: __expectString,
        Monitors: _json,
        Name: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetExtensionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Actions: _json,
        Arn: __expectString,
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        Parameters: _json,
        VersionNumber: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetExtensionAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        ExtensionArn: __expectString,
        ExtensionVersionNumber: __expectInt32,
        Id: __expectString,
        Parameters: _json,
        ResourceArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetHostedConfigurationVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_AI]: [, output.headers[_ai]],
        [_CPI]: [, output.headers[_cpi]],
        [_VN]: [() => void 0 !== output.headers[_vn_], () => __strictParseInt32(output.headers[_vn_])],
        [_D]: [, output.headers[_d]],
        [_CT]: [, output.headers[_ct]],
        [_VL]: [, output.headers[_v]],
        [_KKA]: [, output.headers[_k]],
    });
    const data = await collectBody(output.body, context);
    contents.Content = data;
    return contents;
};
export const de_ListApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConfigurationProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDeploymentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: (_) => de_DeploymentList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDeploymentStrategiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: (_) => de_DeploymentStrategyList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEnvironmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListExtensionAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListExtensionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListHostedConfigurationVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Items: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        AppliedExtensions: _json,
        CompletedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        ConfigurationLocationUri: __expectString,
        ConfigurationName: __expectString,
        ConfigurationProfileId: __expectString,
        ConfigurationVersion: __expectString,
        DeploymentDurationInMinutes: __expectInt32,
        DeploymentNumber: __expectInt32,
        DeploymentStrategyId: __expectString,
        Description: __expectString,
        EnvironmentId: __expectString,
        EventLog: (_) => de_DeploymentEvents(_, context),
        FinalBakeTimeInMinutes: __expectInt32,
        GrowthFactor: __limitedParseFloat32,
        GrowthType: __expectString,
        KmsKeyArn: __expectString,
        KmsKeyIdentifier: __expectString,
        PercentageComplete: __limitedParseFloat32,
        StartedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        State: __expectString,
        VersionLabel: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        AppliedExtensions: _json,
        CompletedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        ConfigurationLocationUri: __expectString,
        ConfigurationName: __expectString,
        ConfigurationProfileId: __expectString,
        ConfigurationVersion: __expectString,
        DeploymentDurationInMinutes: __expectInt32,
        DeploymentNumber: __expectInt32,
        DeploymentStrategyId: __expectString,
        Description: __expectString,
        EnvironmentId: __expectString,
        EventLog: (_) => de_DeploymentEvents(_, context),
        FinalBakeTimeInMinutes: __expectInt32,
        GrowthFactor: __limitedParseFloat32,
        GrowthType: __expectString,
        KmsKeyArn: __expectString,
        KmsKeyIdentifier: __expectString,
        PercentageComplete: __limitedParseFloat32,
        StartedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        State: __expectString,
        VersionLabel: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAccountSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeletionProtection: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Description: __expectString,
        Id: __expectString,
        KmsKeyArn: __expectString,
        KmsKeyIdentifier: __expectString,
        LocationUri: __expectString,
        Name: __expectString,
        RetrievalRoleArn: __expectString,
        Type: __expectString,
        Validators: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeploymentDurationInMinutes: __expectInt32,
        Description: __expectString,
        FinalBakeTimeInMinutes: __expectInt32,
        GrowthFactor: __limitedParseFloat32,
        GrowthType: __expectString,
        Id: __expectString,
        Name: __expectString,
        ReplicateTo: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Description: __expectString,
        Id: __expectString,
        Monitors: _json,
        Name: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateExtensionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Actions: _json,
        Arn: __expectString,
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        Parameters: _json,
        VersionNumber: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateExtensionAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        ExtensionArn: __expectString,
        ExtensionVersionNumber: __expectInt32,
        Id: __expectString,
        Parameters: _json,
        ResourceArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ValidateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.appconfig#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.appconfig#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.appconfig#PayloadTooLargeException":
            throw await de_PayloadTooLargeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Details: (_) => _json(__expectUnion(_)),
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_PayloadTooLargeExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Limit: __limitedParseFloat32,
        Measure: __expectString,
        Message: __expectString,
        Size: __limitedParseFloat32,
    });
    Object.assign(contents, doc);
    const exception = new PayloadTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_DeploymentEvent = (output, context) => {
    return take(output, {
        ActionInvocations: _json,
        Description: __expectString,
        EventType: __expectString,
        OccurredAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        TriggeredBy: __expectString,
    });
};
const de_DeploymentEvents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeploymentEvent(entry, context);
    });
    return retVal;
};
const de_DeploymentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeploymentSummary(entry, context);
    });
    return retVal;
};
const de_DeploymentStrategy = (output, context) => {
    return take(output, {
        DeploymentDurationInMinutes: __expectInt32,
        Description: __expectString,
        FinalBakeTimeInMinutes: __expectInt32,
        GrowthFactor: __limitedParseFloat32,
        GrowthType: __expectString,
        Id: __expectString,
        Name: __expectString,
        ReplicateTo: __expectString,
    });
};
const de_DeploymentStrategyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeploymentStrategy(entry, context);
    });
    return retVal;
};
const de_DeploymentSummary = (output, context) => {
    return take(output, {
        CompletedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        ConfigurationName: __expectString,
        ConfigurationVersion: __expectString,
        DeploymentDurationInMinutes: __expectInt32,
        DeploymentNumber: __expectInt32,
        FinalBakeTimeInMinutes: __expectInt32,
        GrowthFactor: __limitedParseFloat32,
        GrowthType: __expectString,
        PercentageComplete: __limitedParseFloat32,
        StartedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        State: __expectString,
        VersionLabel: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _AI = "ApplicationId";
const _AR = "AllowRevert";
const _CCV = "ClientConfigurationVersion";
const _CI = "ClientId";
const _CPI = "ConfigurationProfileId";
const _CT = "ContentType";
const _CV = "ConfigurationVersion";
const _D = "Description";
const _DPC = "DeletionProtectionCheck";
const _EI = "ExtensionIdentifier";
const _EVN = "ExtensionVersionNumber";
const _KKA = "KmsKeyArn";
const _LVN = "LatestVersionNumber";
const _MR = "MaxResults";
const _N = "Name";
const _NT = "NextToken";
const _RI = "ResourceIdentifier";
const _T = "Type";
const _TK = "TagKeys";
const _VL = "VersionLabel";
const _VN = "VersionNumber";
const _ai = "application-id";
const _ar = "allow-revert";
const _ccv = "client_configuration_version";
const _ci = "client_id";
const _cpi = "configuration-profile-id";
const _ct = "content-type";
const _cv = "configuration_version";
const _cv_ = "configuration-version";
const _d = "description";
const _ei = "extension_identifier";
const _evn = "extension_version_number";
const _k = "kmskeyarn";
const _lvn = "latest-version-number";
const _mr = "max_results";
const _n = "name";
const _nt = "next_token";
const _ri = "resource_identifier";
const _t = "type";
const _tK = "tagKeys";
const _v = "versionlabel";
const _ve = "version";
const _vl = "version_label";
const _vn = "version_number";
const _vn_ = "version-number";
const _xadpc = "x-amzn-deletion-protection-check";
