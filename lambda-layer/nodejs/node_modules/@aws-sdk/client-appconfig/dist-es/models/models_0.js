import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { AppConfigServiceException as __BaseException } from "./AppConfigServiceException";
export const ActionPoint = {
    AT_DEPLOYMENT_TICK: "AT_DEPLOYMENT_TICK",
    ON_DEPLOYMENT_BAKING: "ON_DEPLOYMENT_BAKING",
    ON_DEPLOYMENT_COMPLETE: "ON_DEPLOYMENT_COMPLETE",
    ON_DEPLOYMENT_ROLLED_BACK: "ON_DEPLOYMENT_ROLLED_BACK",
    ON_DEPLOYMENT_START: "ON_DEPLOYMENT_START",
    ON_DEPLOYMENT_STEP: "ON_DEPLOYMENT_STEP",
    PRE_CREATE_HOSTED_CONFIGURATION_VERSION: "PRE_CREATE_HOSTED_CONFIGURATION_VERSION",
    PRE_START_DEPLOYMENT: "PRE_START_DEPLOYMENT",
};
export var BadRequestDetails;
(function (BadRequestDetails) {
    BadRequestDetails.visit = (value, visitor) => {
        if (value.InvalidConfiguration !== undefined)
            return visitor.InvalidConfiguration(value.InvalidConfiguration);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(BadRequestDetails || (BadRequestDetails = {}));
export const BadRequestReason = {
    INVALID_CONFIGURATION: "InvalidConfiguration",
};
export class BadRequestException extends __BaseException {
    name = "BadRequestException";
    $fault = "client";
    Message;
    Reason;
    Details;
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.Details = opts.Details;
    }
}
export class InternalServerException extends __BaseException {
    name = "InternalServerException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const ValidatorType = {
    JSON_SCHEMA: "JSON_SCHEMA",
    LAMBDA: "LAMBDA",
};
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    Message;
    ResourceName;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceName = opts.ResourceName;
    }
}
export const GrowthType = {
    EXPONENTIAL: "EXPONENTIAL",
    LINEAR: "LINEAR",
};
export const ReplicateTo = {
    NONE: "NONE",
    SSM_DOCUMENT: "SSM_DOCUMENT",
};
export const EnvironmentState = {
    DEPLOYING: "DEPLOYING",
    READY_FOR_DEPLOYMENT: "READY_FOR_DEPLOYMENT",
    REVERTED: "REVERTED",
    ROLLED_BACK: "ROLLED_BACK",
    ROLLING_BACK: "ROLLING_BACK",
};
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export const BytesMeasure = {
    KILOBYTES: "KILOBYTES",
};
export class PayloadTooLargeException extends __BaseException {
    name = "PayloadTooLargeException";
    $fault = "client";
    Message;
    Measure;
    Limit;
    Size;
    constructor(opts) {
        super({
            name: "PayloadTooLargeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PayloadTooLargeException.prototype);
        this.Message = opts.Message;
        this.Measure = opts.Measure;
        this.Limit = opts.Limit;
        this.Size = opts.Size;
    }
}
export const DeletionProtectionCheck = {
    ACCOUNT_DEFAULT: "ACCOUNT_DEFAULT",
    APPLY: "APPLY",
    BYPASS: "BYPASS",
};
export const DeploymentEventType = {
    BAKE_TIME_STARTED: "BAKE_TIME_STARTED",
    DEPLOYMENT_COMPLETED: "DEPLOYMENT_COMPLETED",
    DEPLOYMENT_STARTED: "DEPLOYMENT_STARTED",
    PERCENTAGE_UPDATED: "PERCENTAGE_UPDATED",
    REVERT_COMPLETED: "REVERT_COMPLETED",
    ROLLBACK_COMPLETED: "ROLLBACK_COMPLETED",
    ROLLBACK_STARTED: "ROLLBACK_STARTED",
};
export const TriggeredBy = {
    APPCONFIG: "APPCONFIG",
    CLOUDWATCH_ALARM: "CLOUDWATCH_ALARM",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    USER: "USER",
};
export const DeploymentState = {
    BAKING: "BAKING",
    COMPLETE: "COMPLETE",
    DEPLOYING: "DEPLOYING",
    REVERTED: "REVERTED",
    ROLLED_BACK: "ROLLED_BACK",
    ROLLING_BACK: "ROLLING_BACK",
    VALIDATING: "VALIDATING",
};
export const ValidatorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: SENSITIVE_STRING }),
});
export const ConfigurationProfileFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Validators && { Validators: obj.Validators.map((item) => ValidatorFilterSensitiveLog(item)) }),
});
export const CreateConfigurationProfileRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Validators && { Validators: obj.Validators.map((item) => ValidatorFilterSensitiveLog(item)) }),
});
export const CreateHostedConfigurationVersionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: SENSITIVE_STRING }),
});
export const HostedConfigurationVersionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: SENSITIVE_STRING }),
});
export const ConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: SENSITIVE_STRING }),
});
export const StartDeploymentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DynamicExtensionParameters && { DynamicExtensionParameters: SENSITIVE_STRING }),
});
export const UpdateConfigurationProfileRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Validators && { Validators: obj.Validators.map((item) => ValidatorFilterSensitiveLog(item)) }),
});
